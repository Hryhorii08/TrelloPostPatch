import requests
from flask import Flask, request, jsonify

app = Flask(__name__)

# üîπ –î–ê–ù–ù–´–ï TRELLO
TRELLO_API_KEY = "5880197335c3d727693408202c68375d"
TRELLO_TOKEN = "ATTA1ea4c6edf0b2892fec32580ab1417a42f521cd70c11af1453ddd0a4956e72896C175BE4E"
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"

# üîπ –î–ê–ù–ù–´–ï TELEGRAM
TELEGRAM_BOT_TOKEN = "7788946008:AAGULYh-GIkpr-GA3ZA70ERdCAT6BcGNW-g"
CHAT_ID = "-1002307069728"

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    params = {"chat_id": CHAT_ID, "text": message}
    response = requests.post(url, params=params)
    return response.status_code, response.json()

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Trello
def create_trello_card(name, course, age, city):
    url = "https://api.trello.com/1/cards"
    query = {
        "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
        "desc": f"–ö—É—Ä—Å: {course}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ì–æ—Ä–æ–¥: {city}",
        "idList": TRELLO_LIST_ID,
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response = requests.post(url, params=query)
    trello_response = response.json()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    if response.status_code == 200:
        send_telegram_message(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name}!\nüìñ –ö—É—Ä—Å: {course}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüìç –ì–æ—Ä–æ–¥: {city}")

    return response.status_code, trello_response

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ Trello
def find_card_by_name(name):
    url = f"https://api.trello.com/1/lists/{TRELLO_LIST_ID}/cards"
    params = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
    response = requests.get(url, params=params)

    if response.status_code == 200:
        cards = response.json()
        for card in cards:
            if card["name"] == f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}":
                return card["id"]
    return None

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Trello
def update_trello_card(name, field, new_value):
    card_id = find_card_by_name(name)

    if not card_id:
        return 404, {"error": "–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    url_get = f"https://api.trello.com/1/cards/{card_id}"
    params = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
    response_get = requests.get(url_get, params=params)

    if response_get.status_code != 200:
        return 500, {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"}

    card_data = response_get.json()
    description = card_data.get("desc", "")

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
    updated_description = ""
    for line in description.split("\n"):
        if line.startswith(field + ":"):
            updated_description += f"{field}: {new_value}\n"
        else:
            updated_description += line + "\n"

    url_update = f"https://api.trello.com/1/cards/{card_id}"
    update_params = {
        "desc": updated_description.strip(),
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response_update = requests.put(url_update, params=update_params)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    if response_update.status_code == 200:
        send_telegram_message(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {name}:\n‚úèÔ∏è {field} —Ç–µ–ø–µ—Ä—å: {new_value}")

    return response_update.status_code, response_update.json()

# üîπ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@app.route("/send_to_trello", methods=["POST"])
def send_to_trello():
    data = request.json
    name = data.get("name")
    course = data.get("course")
    age = data.get("age")
    city = data.get("city")

    if not all([name, course, age, city]):
        return jsonify({"error": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

    status, response = create_trello_card(name, course, age, city)

    if status == 200:
        return jsonify({"message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Trello"})
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", "details": response}), 500

# üîπ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@app.route("/update_trello", methods=["POST"])
def update_trello():
    data = request.json
    name = data.get("name")
    field = data.get("field")  # "course", "age", "city"
    new_value = data.get("new_value")

    if not all([name, field, new_value]):
        return jsonify({"error": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã"}), 400

    status, response = update_trello_card(name, field, new_value)

    if status == 200:
        return jsonify({"message": f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {field} ‚Üí {new_value}"})
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", "details": response}), 500

# üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
