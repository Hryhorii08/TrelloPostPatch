import requests
from flask import Flask, request, jsonify

app = Flask(__name__)

# üîπ –î–ê–ù–ù–´–ï TRELLO (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏)
TRELLO_API_KEY = "5880197335c3d727693408202c68375d"
TRELLO_TOKEN = "ATTA1ea4c6edf0b2892fec32580ab1417a42f521cd70c11af1453ddd0a4956e72896C175BE4E"
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"

# üîπ –î–ê–ù–ù–´–ï –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –í TELEGRAM
TELEGRAM_BOT_TOKEN = "7788946008:AAGULYh-GIkpr-GA3ZA70ERdCAT6BcGNW-g"
CHAT_ID = "-1002307069728"

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–º–µ–Ω–∏
def find_card_by_name(name):
    url = f"https://api.trello.com/1/lists/{TRELLO_LIST_ID}/cards"
    query = {
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response = requests.get(url, params=query)
    
    if response.status_code == 200:
        cards = response.json()
        for card in cards:
            if card["name"].strip().lower() == f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}".strip().lower():
                return card  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é –∫–∞—Ä—Ç–æ—á–∫—É
    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏

# üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
def create_trello_card(name, course, age, city):
    url = "https://api.trello.com/1/cards"
    query = {
        "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
        "desc": f"–ö—É—Ä—Å: {course}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ì–æ—Ä–æ–¥: {city}",
        "idList": TRELLO_LIST_ID,
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response = requests.post(url, params=query)
    return response.status_code, response.json()

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
def update_trello_card(name, field, new_value):
    card = find_card_by_name(name)
    
    if not card:
        return False, f"–ó–∞—è–≤–∫–∞ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    
    card_id = card["id"]
    description = card.get("desc", "")

    # –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    data_lines = description.split("\n")
    updated_description = []
    field_map = {"course": "–ö—É—Ä—Å", "age": "–í–æ–∑—Ä–∞—Å—Ç", "city": "–ì–æ—Ä–æ–¥"}

    field_updated = False
    for line in data_lines:
        if line.startswith(field_map[field]):
            updated_description.append(f"{field_map[field]}: {new_value}")
            field_updated = True
        else:
            updated_description.append(line)

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü
    if not field_updated:
        updated_description.append(f"{field_map[field]}: {new_value}")

    # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    new_desc = "\n".join(updated_description)

    url = f"https://api.trello.com/1/cards/{card_id}"
    query = {
        "desc": new_desc,
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response = requests.put(url, params=query)

    if response.status_code == 200:
        return True, f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ Trello –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_value}"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": text}
    requests.post(url, data=data)

# üîπ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Trello
@app.route("/send_to_trello", methods=["POST"])
def send_to_trello():
    data = request.json
    name = data.get("name")
    course = data.get("course")
    age = data.get("age")
    city = data.get("city")

    if not all([name, course, age, city]):
        return jsonify({"error": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

    status, response = create_trello_card(name, course, age, city)

    if status == 200:
        send_telegram_message(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Trello!")
        return jsonify({"message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Trello"})
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", "details": response}), 500

# üîπ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Trello
@app.route("/update_trello", methods=["POST"])
def update_trello():
    data = request.json
    name = data.get("name")
    field = data.get("field")  # –ß—Ç–æ –∏–∑–º–µ–Ω—è–µ–º (course, age, city)
    new_value = data.get("new_value")  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    if not all([name, field, new_value]):
        return jsonify({"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400

    success, message = update_trello_card(name, field, new_value)

    if success:
        send_telegram_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í –∑–∞—è–≤–∫–µ {name} –∏–∑–º–µ–Ω–µ–Ω–æ: {field} ‚Üí {new_value}")
        return jsonify({"message": message})
    else:
        send_telegram_message(f"‚ùå {message}")
        return jsonify({"error": message}), 400

# üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
