import os
import json
import requests
from flask import Flask, request, jsonify

app = Flask(__name__)

# üîë API-–∫–ª—é—á–∏
TRELLO_API_KEY = "your_trello_api_key"
TRELLO_TOKEN = "your_trello_token"
TELEGRAM_BOT_TOKEN = "7788946008:AAGULYh-GIkpr-GA3ZA70ERdCAT6BcGNW-g"
CHAT_ID = "-1002307069728"

# üìå URL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Trello
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
    requests.post(url, json=payload)

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ Trello –ø–æ –∏–º–µ–Ω–∏
def find_card(name):
    url = f"https://api.trello.com/1/boards/{TRELLO_BOARD_ID}/cards"
    params = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
    response = requests.get(url, params=params)
    if response.status_code == 200:
        for card in response.json():
            if card["name"].lower() == f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}".lower():
                return card["id"]
    return None

# üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Trello
@app.route("/send_to_trello", methods=["POST"])
def send_to_trello():
    try:
        data = request.json
        name, course, age, city = data["name"], data["course"], data["age"], data["city"]

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello
        url = f"https://api.trello.com/1/cards"
        params = {
            "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
            "desc": f"–ö—É—Ä—Å: {course}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ì–æ—Ä–æ–¥: {city}",
            "idList": TRELLO_LIST_NAME,
            "key": TRELLO_API_KEY,
            "token": TRELLO_TOKEN
        }
        response = requests.post(url, params=params)

        if response.status_code == 200:
            send_telegram_message(f"‚úÖ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\nüìù –ò–º—è: {name}\nüìö –ö—É—Ä—Å: {course}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüìç –ì–æ—Ä–æ–¥: {city}")
            return "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Trello –∏ Telegram"
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏"}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# üìå –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –≤ Trello
@app.route("/update_trello", methods=["PUT"])
def update_trello():
    try:
        data = request.json
        name, field, new_value = data["name"], data["field"], data["new_value"]

        # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ –∏–º–µ–Ω–∏
        card_id = find_card(name)
        if not card_id:
            return jsonify({"error": f"–ó–∞—è–≤–∫–∞ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}), 404

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        url_card = f"https://api.trello.com/1/cards/{card_id}"
        params = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
        response = requests.get(url_card, params=params)
        
        if response.status_code != 200:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏"}), 500
        
        card_desc = response.json()["desc"]
        updated_desc = []

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ
        for line in card_desc.split("\n"):
            if field.lower() in line.lower():
                updated_desc.append(f"{field.capitalize()}: {new_value}")
            else:
                updated_desc.append(line)

        updated_desc_text = "\n".join(updated_desc)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        url_update = f"https://api.trello.com/1/cards/{card_id}"
        update_params = {
            "desc": updated_desc_text,
            "key": TRELLO_API_KEY,
            "token": TRELLO_TOKEN
        }
        update_response = requests.put(url_update, params=update_params)

        if update_response.status_code == 200:
            send_telegram_message(f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏*\nüìù –ò–º—è: {name}\nüñä –ò–∑–º–µ–Ω–µ–Ω–æ: {field} ‚Üí {new_value}")
            return f"–ó–∞—è–≤–∫–∞ '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
        else:
            return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"}), 500

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
