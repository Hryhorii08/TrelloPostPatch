import requests
from flask import Flask, request, jsonify

app = Flask(__name__)

# üîπ –î–ê–ù–ù–´–ï TRELLO
TRELLO_API_KEY = "5880197335c3d727693408202c68375d"
TRELLO_TOKEN = "ATTA1ea4c6edf0b2892fec32580ab1417a42f521cd70c11af1453ddd0a4956e72896C175BE4E"
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"
TELEGRAM_BOT_TOKEN = "7788946008:AAGULYh-GIkpr-GA3ZA70ERdCAT6BcGNW-g"
CHAT_ID = "-1002307069728"

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Trello
def create_trello_card(name, course, age, city):
    url = "https://api.trello.com/1/cards"
    query = {
        "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
        "desc": f"–ö—É—Ä—Å: {course}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ì–æ—Ä–æ–¥: {city}",
        "idList": TRELLO_LIST_ID,
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response = requests.post(url, params=query)
    return response.status_code, response.json()

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–∫–∏
def find_trello_card(name):
    url = f"https://api.trello.com/1/lists/{TRELLO_LIST_ID}/cards"
    query = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
    response = requests.get(url, params=query)

    if response.status_code == 200:
        cards = response.json()
        for card in cards:
            if card["name"].lower() == f"–∑–∞—è–≤–∫–∞ –æ—Ç {name}".lower():
                return card
    return None

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
def update_trello_card(name, field, new_value):
    card = find_trello_card(name)
    if not card:
        return False, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –ø–æ–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    desc_lines = card["desc"].split("\n")
    new_desc = []
    updated = False

    for line in desc_lines:
        if field in line.lower():
            new_desc.append(f"{field.capitalize()}: {new_value}")
            updated = True
        else:
            new_desc.append(line)

    if not updated:
        return False, f"–ü–æ–ª–µ {field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞—è–≤–∫–µ."

    url = f"https://api.trello.com/1/cards/{card['id']}"
    query = {"desc": "\n".join(new_desc), "key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
    response = requests.put(url, params=query)

    if response.status_code == 200:
        send_telegram_message(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í –∑–∞—è–≤–∫–µ '{name}' –∏–∑–º–µ–Ω–µ–Ω–æ –ø–æ–ª–µ '{field}' –Ω–∞ '{new_value}'.")
        return True, f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {field} ‚Üí {new_value}"
    else:
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏."

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    params = {"chat_id": CHAT_ID, "text": text}
    requests.post(url, params=params)

# üîπ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
@app.route("/send_to_trello", methods=["POST"])
def send_to_trello():
    data = request.json
    name = data.get("name")
    course = data.get("course")
    age = data.get("age")
    city = data.get("city")

    if not all([name, course, age, city]):
        return jsonify({"error": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

    status, response = create_trello_card(name, course, age, city)

    if status == 200:
        send_telegram_message(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Trello!")
        return "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Trello"
    else:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ Trello"

# üîπ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@app.route("/update_trello", methods=["POST"])
def update_trello():
    data = request.json
    name = data.get("name")
    field = data.get("field").lower()
    new_value = data.get("new_value")

    if not all([name, field, new_value]):
        return jsonify({"error": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã"}), 400

    success, message = update_trello_card(name, field, new_value)
    return message if success else message

# üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
