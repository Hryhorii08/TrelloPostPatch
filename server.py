from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

# üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram
TELEGRAM_BOT_TOKEN = "7788946008:AAGULYh-GIkpr-GA3ZA70ERdCAT6BcGNW-g"
CHAT_ID = "-1002307069728"

# üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è Trello
TRELLO_API_KEY = "5880197335c3d727693408202c68375d"
TRELLO_TOKEN = "ATTA1ea4c6edf0b2892fec32580ab1417a42f521cd70c11af1453ddd0a4956e72896C175BE4E"
TRELLO_BOARD_ID = "67c19cc6cd0d960e2398be79"
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"

# üì° –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
    requests.post(url, data=data)

# üìå –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞ –≤ OpenAI –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
def format_response_for_openai(response_data):
    return jsonify({"status": "success", "message": response_data}).get_data(as_text=True)

# üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ Trello
@app.route("/send_to_trello", methods=["POST"])
def send_to_trello():
    data = request.json
    name = data.get("name")
    course = data.get("course")
    age = data.get("age")
    city = data.get("city")

    if not all([name, course, age, city]):
        return format_response_for_openai("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"), 400

    query = {
        "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
        "desc": f"üìö –ö—É—Ä—Å: {course}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüìç –ì–æ—Ä–æ–¥: {city}",
        "idList": TRELLO_LIST_ID,
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response = requests.post(f"https://api.trello.com/1/cards", params=query)

    if response.status_code == 200:
        send_telegram_message(f"‚úÖ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\nüìå –ò–º—è: {name}\nüìö –ö—É—Ä—Å: {course}\nüéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüìç –ì–æ—Ä–æ–¥: {city}")
        return format_response_for_openai("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Trello –∏ Telegram"), 200
    else:
        return format_response_for_openai("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Trello"), 500

# üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Trello
@app.route("/update_trello", methods=["PATCH"])
def update_trello():
    data = request.json
    name = data.get("name")
    field = data.get("field")
    new_value = data.get("new_value")

    if not all([name, field, new_value]):
        return format_response_for_openai("–û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"), 400

    # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–º–µ–Ω–∏
    cards_response = requests.get(f"https://api.trello.com/1/boards/{TRELLO_BOARD_ID}/cards",
                                  params={"key": TRELLO_API_KEY, "token": TRELLO_TOKEN})

    if cards_response.status_code != 200:
        return format_response_for_openai("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"), 500

    cards = cards_response.json()
    card = next((c for c in cards if c["name"] == f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}"), None)

    if not card:
        return format_response_for_openai("–û—à–∏–±–∫–∞: –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), 404

    card_id = card["id"]
    new_desc = card["desc"].split("\n")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–µ
    field_mapping = {"course": "üìö –ö—É—Ä—Å", "age": "üéÇ –í–æ–∑—Ä–∞—Å—Ç", "city": "üìç –ì–æ—Ä–æ–¥"}
    
    for i, line in enumerate(new_desc):
        if line.startswith(field_mapping[field]):
            new_desc[i] = f"{field_mapping[field]}: {new_value}"

    updated_desc = "\n".join(new_desc)
    update_response = requests.put(f"https://api.trello.com/1/cards/{card_id}",
                                   params={"desc": updated_desc, "key": TRELLO_API_KEY, "token": TRELLO_TOKEN})

    if update_response.status_code == 200:
        send_telegram_message(f"üõ† *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏*\nüìå –ò–º—è: {name}\n‚úè –ò–∑–º–µ–Ω–µ–Ω–æ: {field} ‚Üí {new_value}")
        return format_response_for_openai(f"{field} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ"), 200
    else:
        return format_response_for_openai("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
