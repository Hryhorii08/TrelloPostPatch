import requests
from flask import Flask, request, jsonify

app = Flask(__name__)

# üîπ –î–∞–Ω–Ω—ã–µ Trello
TRELLO_API_KEY = "5880197335c3d727693408202c68375d"
TRELLO_TOKEN = "ATTA1ea4c6edf0b2892fec32580ab1417a42f521cd70c11af1453ddd0a4956e72896C175BE4E"
TRELLO_LIST_ID = "67c19cd6641117e44ae95227"
TRELLO_BOARD_ID = "–í–∞—à_BOARD_ID"  # –î–æ–±–∞–≤—å—Ç–µ ID –¥–æ—Å–∫–∏ Trello

# üîπ –î–∞–Ω–Ω—ã–µ Telegram
TELEGRAM_BOT_TOKEN = "7788946008:AAGULYh-GIkpr-GA3ZA70ERdCAT6BcGNW-g"
CHAT_ID = "-1002307069728"

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "HTML"}
    requests.post(url, json=payload)

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞
def find_trello_card(name):
    url = f"https://api.trello.com/1/boards/{TRELLO_BOARD_ID}/cards"
    query = {"key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
    response = requests.get(url, params=query)

    if response.status_code == 200:
        cards = response.json()
        for card in cards:
            if card["name"].lower().strip() == f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}".lower().strip():
                return card["id"], card.get("desc", "")
    return None, None

# üîπ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Trello
def create_trello_card(name, course, age, city):
    url = "https://api.trello.com/1/cards"
    query = {
        "name": f"–ó–∞—è–≤–∫–∞ –æ—Ç {name}",
        "desc": f"–ö—É—Ä—Å: {course}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ì–æ—Ä–æ–¥: {city}",
        "idList": TRELLO_LIST_ID,
        "key": TRELLO_API_KEY,
        "token": TRELLO_TOKEN
    }
    response = requests.post(url, params=query)
    if response.status_code == 200:
        send_telegram_message(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Trello.\n\n"
                              f"üìå –ö—É—Ä—Å: {course}\nüë∂ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüìç –ì–æ—Ä–æ–¥: {city}")
    return response.status_code, response.json()

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
def update_trello_card(name, field, new_value):
    card_id, current_desc = find_trello_card(name)
    if not card_id:
        return False, f"–ó–∞—è–≤–∫–∞ —Å –∏–º–µ–Ω–µ–º '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    # –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    desc_lines = current_desc.split("\n")
    updated_desc = []
    found = False

    for line in desc_lines:
        if field in line.lower():
            updated_desc.append(f"{field.capitalize()}: {new_value}")
            found = True
        else:
            updated_desc.append(line)

    if not found:
        updated_desc.append(f"{field.capitalize()}: {new_value}")

    # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    new_desc = "\n".join(updated_desc)
    url = f"https://api.trello.com/1/cards/{card_id}"
    query = {"desc": new_desc, "key": TRELLO_API_KEY, "token": TRELLO_TOKEN}
    response = requests.put(url, params=query)

    if response.status_code == 200:
        send_telegram_message(f"üü¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n"
                              f"üìå –í –∑–∞—è–≤–∫–µ <b>{name}</b> –∏–∑–º–µ–Ω–µ–Ω–æ <b>{field}</b> ‚Üí {new_value}.")
        return True, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ Trello."

    return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Trello."

# üîπ API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.route("/send_to_trello", methods=["POST"])
def send_to_trello():
    data = request.json
    name = data.get("name")
    course = data.get("course")
    age = data.get("age")
    city = data.get("city")

    if not all([name, course, age, city]):
        return jsonify({"error": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

    status, response = create_trello_card(name, course, age, city)
    if status == 200:
        return jsonify({"message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Trello."})
    else:
        return jsonify({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏", "details": response}), 500

@app.route("/update_trello", methods=["POST"])
def update_trello():
    data = request.json
    name = data.get("name")
    field = data.get("field")
    new_value = data.get("new_value")

    if not all([name, field, new_value]):
        return jsonify({"error": "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

    success, message = update_trello_card(name, field, new_value)
    if success:
        return jsonify({"message": message})
    else:
        return jsonify({"error": message}), 400

# üîπ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
